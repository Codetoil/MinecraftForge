buildscript {
    repositories {
        mavenLocal()
        maven { url = "http://maven.minecraftforge.net" }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1+'
    }
}

import groovy.json.JsonBuilder

import java.nio.file.Files
import java.util.Date
import java.util.LinkedHashMap
import net.minecraftforge.forge.tasks.*
import static net.minecraftforge.forge.tasks.Util.*
import net.minecraftforge.gradle.common.task.DownloadMavenArtifact
import net.minecraftforge.gradle.common.task.ExtractInheritance
import net.minecraftforge.gradle.common.task.SignJar
import net.minecraftforge.gradle.patcher.task.TaskReobfuscateJar
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.ide.eclipse.model.SourceFolder

println('Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')' +
        ' Arch: ' + System.getProperty('os.arch')
)

Util.init()

// https://github.com/MinecraftForge/MinecraftForge/blob/1.11.x/build.gradle
// https://github.com/MinecraftForge/MinecraftForge/blob/1.12.x/build.gradle
// https://github.com/MinecraftForge/MinecraftForge/blob/1.16.x/build.gradle

// https://github.com/RetroGradle/MinecraftForge/blob/temp_rg1.11.x/build.gradle
// https://github.com/MinecraftForge/MinecraftForge/blob/1.16.x/buildSrc/build.gradle

//------------------------------------------------------------------------------------------------------------------------------------------
// Configuration
//------------------------------------------------------------------------------------------------------------------------------------------
ext {
    JAR_SIGNER = null
    if (project.hasProperty('keystore')) {
        JAR_SIGNER = [
                storepass: project.properties.keystoreStorePass,
                keypass: project.properties.keystoreKeyPass,
                keystore: project.properties.keystore
        ]
    }
    MAPPING_CHANNEL = 'snapshot_nodoc'
    MAPPING_VERSION = '20161220-1.11'
    MC_VERSION = '1.11.2'
    MCP_VERSION = '20210627.140000'
    POST_PROCESSOR = [
        tool: 'net.minecraftforge:mcpcleanup:2.3.2:fatjar',
        repo: 'https://maven.minecraftforge.net/',
        args: ['--input', '{input}', '--output', '{output}']
    ]
}

//------------------------------------------------------------------------------------------------------------------------------------------
// RetroGradle
//------------------------------------------------------------------------------------------------------------------------------------------
apply from: 'retrogradle-dev.gradle'
ext {
    LEGACY_MAJOR = 13     // Legacy versions have a API change prefix
    LEGACY_BUILD = 2588   // Base build number to not conflict with existing build numbers
    BUILD_NUMBER = 0      // LEGACY_BUILD + commit offset, used to mimic unique build from old versions
    SPEC_VERSION = '20.1' // This is overwritten by git tag, but here so dev time doesnt explode
}

//------------------------------------------------------------------------------------------------------------------------------------------
// MCP
//------------------------------------------------------------------------------------------------------------------------------------------
project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.mcp'
    repositories {
        mavenLocal()
    }
    mcp {
        config = MC_VERSION + '-' + MCP_VERSION
        pipeline = 'joined'
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Clean
//------------------------------------------------------------------------------------------------------------------------------------------
project(':clean') {
    evaluationDependsOn(':mcp')
    apply plugin: 'eclipse'
    apply plugin: 'net.minecraftforge.gradle.patcher'

    java.toolchain.languageVersion = JavaLanguageVersion.of(8)

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        implementation 'net.minecraftforge:mergetool:0.2.3.3:forge'
    }

    patcher {
        parent = project(':mcp')
        mcVersion = MC_VERSION
        patchedSrc = file('src/main/java')

        mappings channel: MAPPING_CHANNEL, version: MAPPING_VERSION
        processor = POST_PROCESSOR

        runs {
            clean_client {
                taskName 'clean_client'

                main 'net.minecraft.client.main.Main'
                workingDirectory project.file('run')

                args '--gameDir', '.'
                args '--version', MC_VERSION
                args '--assetsDir', downloadAssets.output
                args '--assetIndex', '{asset_index}'
                args '--accessToken', '0'
            }

            clean_server {
                taskName 'clean_server'

                main 'net.minecraft.server.Main'
                workingDirectory project.file('run')
            }
        }
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Forge
//------------------------------------------------------------------------------------------------------------------------------------------
project(':forge') {
    evaluationDependsOn(':clean')
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'
    apply plugin: 'net.minecraftforge.gradle.patcher'

    java.toolchain.languageVersion = JavaLanguageVersion.of(8)
    group = 'net.minecraftforge'

    sourceSets {
        main {
            java { srcDirs = ["$rootDir/src/main/java"] }
            resources { srcDirs = ["$rootDir/src/main/resources"] }
        }
        test {
            compileClasspath += sourceSets.main.runtimeClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
            java { srcDirs = ["$rootDir/src/test/java"] }
            resources { srcDirs = ["$rootDir/src/test/resources"] }
        }
    }

    //Eclipse adds the sourcesets twice, once where we tell it to, once in the projects folder. No idea why. So delete them
    eclipse.classpath.file.whenMerged { cls -> cls.entries.removeIf { e -> e instanceof SourceFolder && e.path.startsWith('src/') && !e.path.startsWith('src/main/') } }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext {
        GIT_INFO = Util.gitInfo(rootProject.file('.'))

        MCP_ARTIFACT = project(':mcp').mcp.config
        SPECIAL_SOURCE = 'net.md-5:SpecialSource:1.9.0'
        SPECIAL_SOURCE_MCP = 'net.md-5:SpecialSource:1.8.5'
        VERSION_JSON = project(':mcp').file('build/mcp/downloadJson/version.json')
        BINPATCH_TOOL = 'net.minecraftforge:binarypatcher:1.1.1:fatjar'
        INSTALLER_TOOLS = 'net.minecraftforge:installertools:1.1.11'
    }

    def getVersion = { info ->
        def branch = info.branch

        //
        if (branch in ['master', 'HEAD', MC_VERSION, MC_VERSION + '.0']) branch = null

        // 1.13.x style
        if (branch != null && branch.endsWith('.x') && MC_VERSION.startsWith(branch.substring(0, branch.length() - 2))) branch = null

        SPEC_VERSION = info.tag
        BUILD_NUMBER = LEGACY_BUILD + info.offset.toInteger()

        // Bake the response instead of making it dynamic
        return "${MC_VERSION}-${LEGACY_MAJOR}.${info.tag}.${BUILD_NUMBER}${t -> if (branch != null) t << '-' + branch}".toString()
    }

    version = getVersion(GIT_INFO)
    println('Forge Version: ' + version)

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Setup
    //--------------------------------------------------------------------------------------------------------------------------------------
    patcher {
        exc = file("$rootDir/src/main/resources/forge.exc")
        parent = project(':clean')
        patches = file("$rootDir/patches/minecraft")
        patchedSrc = file('src/main/java')
        srgPatches = true
        notchObf = true

        accessTransformer = file("$rootDir/src/main/resources/forge_at.cfg")
        //sideAnnotationStripper = file("$rootDir/src/main/resources/forge.sas")
        processor = POST_PROCESSOR

        //----------------------------------------------------------------------------------------------------------------------------------
        // Run Configurations
        //----------------------------------------------------------------------------------------------------------------------------------
        runs {
            forge_client {
                taskName 'forge_client'
                main 'net.minecraftforge.legacydev.MainClient'
                workingDirectory project.file('run')

                environment 'target',           'fmldevclient'
                environment 'tweakClass',       'net.minecraftforge.fml.common.launcher.FMLTweaker'
                environment 'mainClass',        'net.minecraft.launchwrapper.Launch'
                environment 'assetIndex',       '{asset_index}'
                environment 'assetDirectory',   '{assets_root}'
                environment 'nativesDirectory', '{natives}'
                environment 'MC_VERSION',        MC_VERSION
                environment 'MCP_VERSION',       MCP_VERSION
                environment 'MCP_MAPPINGS',     '{mcp_mappings}'
                environment 'MCP_TO_SRG',       '{mcp_to_srg}'
                environment 'FORGE_GROUP',      project.group
                environment 'FORGE_VERSION',    project.version.substring(MC_VERSION.length() + 1)

                mods {
                    forge { source sourceSets.main }
                }
            }

            forge_test_client {
                parent runs.forge_client
                taskName 'forge_test_client'

                environment 'MOD_CLASSES', 'dummy' // Needed to work around FG limitation, FG will replace this!

                ideaModule "${rootProject.name}.${project.name}.userdev_test"

                mods {
                    forge { source sourceSets.main }
                    tests { sources sourceSets.test }
                }
            }

            forge_server {
                taskName 'forge_server'
                main 'net.minecraftforge.legacydev.MainServer'
                workingDirectory project.file('run')


                environment 'target',           'fmldevserver'
                environment 'tweakClass',       'net.minecraftforge.fml.common.launcher.FMLServerTweaker'
                environment 'mainClass',        'net.minecraft.launchwrapper.Launch'
                environment 'MC_VERSION',        MC_VERSION
                environment 'MCP_VERSION',       MCP_VERSION
                environment 'MCP_MAPPINGS',     '{mcp_mappings}'
                environment 'MCP_TO_SRG',       '{mcp_to_srg}'
                environment 'FORGE_GROUP',      "${project.group}"
                environment 'FORGE_VERSION',    "${project.version.substring(MC_VERSION.length() + 1)}"

                mods {
                    forge { source sourceSets.main }
                }
            }

            forge_test_server {
                parent runs.forge_server
                taskName 'forge_test_server'

                environment 'MOD_CLASSES', 'dummy' // Needed to work around FG limitation, FG will replace this!

                ideaModule "${rootProject.name}.${project.name}.userdev_test"

                mods {
                    forge { source sourceSets.main }
                    tests { sources sourceSets.test }
                }
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Patches
    //--------------------------------------------------------------------------------------------------------------------------------------
    applyPatches {
        originalPrefix = "../src-base/minecraft/"
        modifiedPrefix = "../src-work/minecraft/"
    }

    genPatches {
        originalPrefix = '../src-base/minecraft/'
        modifiedPrefix = '../src-work/minecraft/'
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Manifest
    //--------------------------------------------------------------------------------------------------------------------------------------
    ext {
        MANIFESTS = [
                //TODO: jgit
                '/': [
                        'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                        'GitCommit': GIT_INFO.abbreviatedId,
                        'Git-Branch': GIT_INFO.branch
                ] as LinkedHashMap,
                'net/minecraftforge/common/': [
                        'Specification-Title':      'Forge',
                        'Specification-Vendor':     'Forge Development LLC',
                        'Specification-Version':    SPEC_VERSION,
                        'Implementation-Title':     project.group,
                        'Implementation-Version':   project.version.substring(MC_VERSION.length() + 1),
                        'Implementation-Vendor':    'Forge Development LLC'
                ] as LinkedHashMap
        ]
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Dependencies
    //--------------------------------------------------------------------------------------------------------------------------------------
    configurations {
        installer {
            transitive = false //Don't pull all libraries, if we're missing something, add it to the installer list so the installer knows to download it.
        }
        api.extendsFrom(installer)
    }

    dependencies {
        installer 'org.ow2.asm:asm-debug-all:5.2'
        installer 'net.minecraft:launchwrapper:1.12'
        installer 'com.typesafe.akka:akka-actor_2.11:2.3.3'
        installer 'com.typesafe:config:1.2.1'
        installer 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
        installer 'org.scala-lang:scala-compiler:2.11.1'
        installer 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2_mc'  //We change the version so old installs don't break, as our clone of the jar is different the maven central
        installer 'org.scala-lang.plugins:scala-continuations-plugin_2.11.1:1.0.2_mc' // --^
        installer 'org.scala-lang:scala-library:2.11.1'
        installer 'org.scala-lang:scala-parser-combinators_2.11:1.0.1'
        installer 'org.scala-lang:scala-reflect:2.11.1'
        installer 'org.scala-lang:scala-swing_2.11:1.0.1'
        installer 'org.scala-lang:scala-xml_2.11:1.0.2'
        installer 'lzma:lzma:0.0.1'
        installer 'java3d:vecmath:1.5.2'
        installer 'net.sf.trove4j:trove4j:3.0.3'
        installer 'org.apache.maven:maven-artifact:3.5.3'
        installer 'net.sf.jopt-simple:jopt-simple:5.0.3'

        installer 'jline:jline:2.13'

        //TODO:
        /*
        forgeGradleMcDeps
        +--- com.google.code.findbugs:jsr305:3.0.1
        +--- com.mojang:netty:1.6
        +--- oshi-project:oshi-core:1.1
        |    +--- net.java.dev.jna:jna:3.4.0
        |    \--- net.java.dev.jna:platform:3.4.0
        +--- net.java.dev.jna:jna:3.4.0
        +--- net.java.dev.jna:platform:3.4.0
        +--- com.ibm.icu:icu4j-core-mojang:51.2
        +--- net.sf.jopt-simple:jopt-simple:4.6
        +--- io.netty:netty-all:4.0.23.Final
        +--- com.google.guava:guava:17.0
        +--- org.apache.commons:commons-lang3:3.3.2
        +--- commons-io:commons-io:2.4
        +--- commons-codec:commons-codec:1.9
        +--- net.java.jutils:jutils:1.0.0
        +--- com.google.code.gson:gson:2.2.4
        +--- com.mojang:authlib:1.5.24
        |    +--- com.google.code.findbugs:jsr305:2.0.1 -> 3.0.1
        |    +--- com.google.guava:guava:17.0
        |    +--- org.apache.logging.log4j:log4j-core:2.0-beta9
        |    |    \--- org.apache.logging.log4j:log4j-api:2.0-beta9
        |    +--- commons-io:commons-io:2.4
        |    +--- org.apache.commons:commons-lang3:3.3.2
        |    +--- org.apache.logging.log4j:log4j-api:2.0-beta9
        |    +--- com.google.code.gson:gson:2.2.4
        |    \--- commons-codec:commons-codec:1.9
        +--- com.mojang:realms:1.10.16
        |    +--- org.apache.httpcomponents:httpcore:4.3.2
        |    +--- org.apache.httpcomponents:httpclient:4.3.3
        |    |    +--- org.apache.httpcomponents:httpcore:4.3.2
        |    |    +--- commons-logging:commons-logging:1.1.3
        |    |    \--- commons-codec:commons-codec:1.6 -> 1.9
        |    +--- org.apache.commons:commons-compress:1.8.1
        |    \--- commons-logging:commons-logging:1.1.3
        +--- org.apache.commons:commons-compress:1.8.1
        +--- org.apache.httpcomponents:httpclient:4.3.3 (*)
        +--- commons-logging:commons-logging:1.1.3
        +--- org.apache.httpcomponents:httpcore:4.3.2
        +--- it.unimi.dsi:fastutil:7.0.12_mojang
        +--- org.apache.logging.log4j:log4j-api:2.0-beta9
        +--- org.apache.logging.log4j:log4j-core:2.0-beta9 (*)
        +--- net.minecraft:launchwrapper:1.12
        |    +--- org.ow2.asm:asm-debug-all:5.0.3
        |    +--- org.apache.logging.log4j:log4j-core:2.0-beta9 (*)
        |    +--- net.sf.jopt-simple:jopt-simple:4.5 -> 4.6
        |    +--- org.lwjgl.lwjgl:lwjgl:2.9.1 -> 2.9.4-nightly-20150209
        |    |    +--- org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209
        |    |    \--- net.java.jinput:jinput:2.0.5
        |    |         +--- net.java.jutils:jutils:1.0.0
        |    |         \--- net.java.jinput:jinput-platform:2.0.5
        |    \--- org.apache.logging.log4j:log4j-api:2.0-beta9
        +--- jline:jline:2.13
        |    \--- org.fusesource.jansi:jansi:1.11
        +--- com.google.code.findbugs:jsr305:1.3.9 -> 3.0.1
        +--- org.ow2.asm:asm-debug-all:5.0.3
        +--- com.typesafe.akka:akka-actor_2.11:2.3.3
        |    +--- org.scala-lang:scala-library:2.11.1
        |    \--- com.typesafe:config:1.2.1
        +--- com.typesafe:config:1.2.1
        +--- org.scala-lang:scala-actors-migration_2.11:1.1.0
        |    +--- org.scala-lang:scala-library:2.11.0 -> 2.11.1
        |    +--- org.scala-lang:scala-actors:2.11.0
        |    |    \--- org.scala-lang:scala-library:2.11.0 -> 2.11.1
        |    \--- org.scala-lang.plugins:scala-continuations-library_2.11:1.0.1 -> 1.0.2
        |         \--- org.scala-lang:scala-library:2.11.1
        +--- org.scala-lang:scala-compiler:2.11.1
        |    +--- org.scala-lang:scala-library:2.11.1
        |    +--- org.scala-lang:scala-reflect:2.11.1
        |    |    \--- org.scala-lang:scala-library:2.11.1
        |    +--- org.scala-lang.modules:scala-xml_2.11:1.0.2
        |    |    \--- org.scala-lang:scala-library:2.11.1
        |    \--- org.scala-lang.modules:scala-parser-combinators_2.11:1.0.1
        |         \--- org.scala-lang:scala-library:2.11.0 -> 2.11.1
        +--- org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2 (*)
        +--- org.scala-lang.plugins:scala-continuations-plugin_2.11.1:1.0.2
        |    +--- org.scala-lang:scala-compiler:2.11.1 (*)
        |    \--- org.scala-lang:scala-library:2.11.1
        +--- org.scala-lang:scala-library:2.11.1
        +--- org.scala-lang.modules:scala-parser-combinators_2.11:1.0.1 (*)
        +--- org.scala-lang:scala-reflect:2.11.1 (*)
        +--- org.scala-lang.modules:scala-swing_2.11:1.0.1
        |    \--- org.scala-lang:scala-library:2.11.0 -> 2.11.1
        +--- org.scala-lang.modules:scala-xml_2.11:1.0.2 (*)
        +--- lzma:lzma:0.0.1
        +--- net.sf.trove4j:trove4j:3.0.3
        +--- com.paulscode:codecjorbis:20101023
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:codecwav:20101023
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:libraryjavasound:20101123
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:librarylwjglopenal:20100824
        |    +--- com.paulscode:soundsystem:20120107
        |    \--- org.lwjgl.lwjgl:lwjgl:2.8.3 -> 2.9.4-nightly-20150209 (*)
        +--- com.paulscode:soundsystem:20120107
        +--- net.java.jinput:jinput:2.0.5 (*)
        +--- org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209 (*)
        +--- org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209
        |    \--- org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209 (*)
        \--- java3d:vecmath:1.5.2
        forgeGradleMcDepsClient
        +--- com.paulscode:codecjorbis:20101023
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:codecwav:20101023
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:libraryjavasound:20101123
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:librarylwjglopenal:20100824
        |    +--- com.paulscode:soundsystem:20120107
        |    \--- org.lwjgl.lwjgl:lwjgl:2.8.3 -> 2.9.4-nightly-20150209
        |         +--- org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209
        |         \--- net.java.jinput:jinput:2.0.5
        |              +--- net.java.jutils:jutils:1.0.0
        |              \--- net.java.jinput:jinput-platform:2.0.5
        +--- com.paulscode:soundsystem:20120107
        +--- net.java.jinput:jinput:2.0.5 (*)
        +--- org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209 (*)
        +--- org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209
        |    \--- org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209 (*)
        \--- java3d:vecmath:1.5.2
        forgeGradleMcNatives
        +--- org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209
        \--- net.java.jinput:jinput-platform:2.0.5
        forgeGradleMcpData
        \--- de.oceanlabs.mcp:mcp:1.11.2
        forgeGradleMcpMappings
        \--- de.oceanlabs.mcp:mcp_snapshot_nodoc:20161220-1.11
        launch4j - The launch4j configuration for this project.
        No dependencies
        BUILD SUCCESSFUL
        */

        implementation 'net.minecraftforge:legacydev:0.2.3.+:fatjar'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.0'
        testImplementation 'org.junit.vintage:junit-vintage-engine:5.+'
        testImplementation 'org.opentest4j:opentest4j:1.0.0' // needed for junit 5
        testImplementation 'org.hamcrest:hamcrest-all:1.3' // needs advanced matching for list order
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Extra Texts for Installer
    //--------------------------------------------------------------------------------------------------------------------------------------
    def extraTxts = [
            rootProject.file('CREDITS.txt'),
            rootProject.file('LICENSE.txt'),
            rootProject.file('LICENSE-Paulscode IBXM Library.txt'),
            rootProject.file('LICENSE-Paulscode SoundSystem CodecIBXM.txt')
    ]

    def changelog = rootProject.file('build/changelog.txt')
    if (changelog.exists())
        extraTxts += changelog


    //--------------------------------------------------------------------------------------------------------------------------------------
    // Bin Patch Generation
    //--------------------------------------------------------------------------------------------------------------------------------------
    // We apply the bin patches we just created to make a jar that is JUST our changes
    ['Client', 'Server', 'Joined'].each { side ->
        def gen = tasks.getByName("gen${side}BinPatches")
        gen.tool = BINPATCH_TOOL
        task "apply${side}BinPatches"(type: net.minecraftforge.gradle.common.task.ApplyBinPatches, dependsOn: gen) {
            clean = { gen.cleanJar }
            patch = gen.output
            tool = BINPATCH_TOOL
        }

        def srgTask = tasks.getByName(patcher.notchObf ? 'createMcp2Obf' : 'createMcp2Srg')
        // Create SRG named Vanilla jars, using the SpecialSource we have in the installer
        task "create${side}SRG"(type: net.minecraftforge.gradle.userdev.tasks.RenameJar, dependsOn: srgTask) {
            tool = SPECIAL_SOURCE_MCP + ':shaded'
            args = ['--stable', '--in-jar', '{input}', '--out-jar', '{output}', '--srg-in', '{mappings}']
            mappings = { srgTask.output }
            input = { gen.cleanJar }
            output = file("build/create${name}SRG/output.jar")
        }
    }
    //TODO:
//    afterEvaluate { p ->
//        genRuntimeBinPatches {
//            cleanJar = genClientBinPatches.cleanJar
//            dirtyJar = genClientBinPatches.dirtyJar
//            srg = genClientBinPatches.srg
//            patchSets = genClientBinPatches.patchSets
//            args = [
//                    '--output', '{output}',
//                    '--patches', '{patches}',
//                    '--srg', '{srg}',
//                    '--legacy',
//
//                    '--clean', '{clean}',
//                    '--dirty', '{dirty}',
//                    '--prefix', 'binpatch/client',
//
//                    '--clean', '{server}',
//                    '--dirty', '{dirty}',
//                    '--prefix', 'binpatch/server'
//            ]
//            addExtra('server', genServerBinPatches.cleanJar)
//        }
//    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Checks
    //--------------------------------------------------------------------------------------------------------------------------------------
    task downloadLibraries(type: DownloadLibrariesTask, dependsOn: ':mcp:setupMCP') {
        input = VERSION_JSON
        output = rootProject.file('build/libraries/')
    }

    task extractInheritance(type: ExtractInheritance, dependsOn: [genJoinedBinPatches, downloadLibraries]) {
        tool = INSTALLER_TOOLS + ':fatjar'
        input { genJoinedBinPatches.cleanJar }
        doFirst { downloadLibraries.libraries.each{ addLibrary(it) } }
    }

    task checkATs(type: CheckATs, dependsOn: extractInheritance) {
        inheritance = extractInheritance.output
        ats = patcher.accessTransformers
    }

    task checkSAS(type: CheckSAS, dependsOn: extractInheritance) {
        inheritance = extractInheritance.output
        sass = patcher.sideAnnotationStrippers
    }

    task checkExcs(type: CheckExcs, dependsOn: jar) {
        binary = jar.archivePath
        excs = patcher.excs
    }

    task checkAll(dependsOn: [checkATs, checkSAS, checkExcs]){}

    task checkPatchesAndFix(type: CheckPatches) {
        patchDir = file("$rootDir/patches")
        autoFix = true
    }

    task checkPatches(type: CheckPatches) {
        patchDir = file("$rootDir/patches")
        autoFix = false
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Installer
    //--------------------------------------------------------------------------------------------------------------------------------------

    // TODO:

    //--------------------------------------------------------------------------------------------------------------------------------------
    // MDK
    //--------------------------------------------------------------------------------------------------------------------------------------
    task makeMdk(type: Zip) {
        baseName = project.name
        classifier = 'mdk'
        version = project.version
        destinationDir = file('build/libs')

        from rootProject.file('gradlew')
        from rootProject.file('gradlew.bat')
        from extraTxts
        from(rootProject.file('gradle/')){
            into('gradle/')
        }
        from(rootProject.file('mdk/')){
            rootProject.file('mdk/gitignore.txt').eachLine{
                if (!it.trim().isEmpty() && !it.trim().startsWith('#')) exclude it
            }
            filter(ReplaceTokens, tokens: [
                    FORGE_VERSION: project.version,
                    FORGE_GROUP: project.group,
                    FORGE_NAME: project.name,
                    MC_VERSION: MC_VERSION,
                    MAPPING_CHANNEL: MAPPING_CHANNEL,
                    MAPPING_VERSION: MAPPING_VERSION
            ])
            rename 'gitignore\\.txt', '.gitignore'
        }
    }

    //TODO:
    extractRangeMap {
        addDependencies jar.archivePath
    }

    tasks.eclipse.dependsOn('genEclipseRuns')

    if (project.hasProperty('UPDATE_MAPPINGS')) {
        extractRangeMap {
            sources sourceSets.test.java.srcDirs
            addDependencies compileTestJava.classpath
        }
        applyRangeMap {
            sources sourceSets.test.java.srcDirs
        }
        sourceSets.test.java.srcDirs.each { extractMappedNew.addTarget it }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact universalJar
                if (changelog.exists()) {
                    artifact(changelog) {
                        classifier = 'changelog'
                    }
                }
                //TODO: artifact installerJar
                //TODO: installer-win
                artifact makeMdk
                artifact userdevJar
                artifact sourcesJar
                //TODO: artifact launcherJar

                pom {
                    name = 'forge'
                    description = 'Modifications to Minecraft to enable mod developers.'
                    url = 'https://github.com/MinecraftForge/MinecraftForge'

                    scm {
                        url = 'https://github.com/MinecraftForge/MinecraftForge'
                        connection = 'scm:git:git://github.com/MinecraftForge/MinecraftForge.git'
                        developerConnection = 'scm:git:git@github.com:MinecraftForge/MinecraftForge.git'
                    }

                    issueManagement {
                        system = 'github'
                        url = 'https://github.com/MinecraftForge/MinecraftForge/issues'
                    }

                    licenses {
                        license {
                            name = 'LGPL 2.1'
                            url = 'https://github.com/MinecraftForge/MinecraftForge/blob/1.13-pre/LICENSE.txt'
                            distribution = 'repo'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                if (System.env.MAVEN_USER) {
                    url "https://maven.minecraftforge.net/releases/"
                    authentication {
                        basic(BasicAuthentication)
                    }
                    credentials {
                        username = System.env.MAVEN_USER ?: 'not'
                        password = System.env.MAVEN_PASSWORD ?: 'set'
                    }
                } else {
                    url 'file://' + rootProject.file('repo').getAbsolutePath()
                }
            }
        }
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Setup
//------------------------------------------------------------------------------------------------------------------------------------------
task setup() {
    //These must be strings so that we can do lazy resolution. Else we need evaluationDependsOnChildren above
    dependsOn ':clean:extractMapped'
    dependsOn ':forge:extractMapped'
}